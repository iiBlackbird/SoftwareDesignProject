// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  email String @unique
  fullName String?
  password String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Gonna add this later, focusing on authentication first - matt
  // location String?
  // skills String[]
  // preferences String[]
  // availability String?

  emailVerified Boolean @default(false)
  verificationToken String? @unique
  emailVerificationTokenExpires DateTime?

  profile     UserProfile? // 1 user - 1 profile
  volunteerHistories VolunteerHistory[] // 1 user - many volunteer history records
}

model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique // foreign key
  fullName    String   @db.VarChar(50)
  address1    String   @db.VarChar(100)
  address2    String?  @db.VarChar(100)
  city        String   @db.VarChar(100)
  state       String   @db.Char(2)
  zipcode     String   @db.VarChar(9)
  skills      String[] // Multi-select dropdown 
  preferences String?  // optional text area
  availability DateTime[] // multiple date selections allowed

  user        User     @relation(fields: [userId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Event table 
model Event {
  id           String @id @default(cuid())
  name         String
  description  String
  location     String
  requiredSkills String[]
  urgency      String
  eventDate    DateTime  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  volunteerHistories VolunteerHistory[]
}

// VolunteerHistory table - will implement later 
model VolunteerHistory {
  id         String   @id @default(cuid())
  userId     String   // foreign key to User.id
  eventId    String   // foreign key to Event.id
  status     String   // 'enrolled', 'assigned', 'completed'

  user       User     @relation(fields: [userId], references: [id])
  event      Event    @relation(fields: [eventId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}